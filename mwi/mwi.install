<?php
/**
 * This is a HACK. It does not create anything into the database of Drupal. 
 * Upon installing the module it tries to do batch copying of users and user-to-group assignments.
 */
// Get config params
require("mwi.config");


/**
 * Implementation of hook_schema(). This triggers warnings that should be ignored.
 * @todo make it run without warnings in drupal
 */
function mwi_schema() {
  //transfer MW and VOP groups to drupal roles and map user-to-group relations
  if ($GLOBALS['iwDebug']) error_log("schema");
  return array();
  
}

/**
 * Implementation of hook_install(). Copies users, groups and user-to-group assignemnts to Drupal DB.
 * Warning is displayed in Drupal when If user, group or assignment is already in Drupal database. 
 * These warnings should be ignored. This is intentional in order to not generate queries to Drupal database
 * in order to check if user or assignment is already there.
 * @todo supress known warnings or make checks of existence.
 */
function mwi_install() {
  // Transfer MW groups to drupal roles and map user-to-group relations.
  if ($GLOBALS['iwDebug']) error_log("installing");
  if (iwTransferMwUsersToDrupal()){
    if ($GLOBALS['iwDebug']) error_log("users transferred");
  } else {
    if ($GLOBALS['iwDebug']) error_log("users were not transferred");
    return;
  }
  //native wiki groups
  if (iwTransferMwGroupsToDrupal()){
    if ($GLOBALS['iwDebug']) error_log("groups to roles transferred");
  } else {
    if ($GLOBALS['iwDebug']) error_log("groups to roles were not transferred");
    return;
  }
  if (iwTransferMwUsers2GroupsToDrupal()){
    if ($GLOBALS['iwDebug']) error_log("user2groups to users2roles transferred");
  } else {
    if ($GLOBALS['iwDebug']) error_log("user2groups to users2roles were not transferred");
    return;
  }
}
/**
 * Implementation of hook_install().
 * mwi_uninstall() does nothing.
 */
function mwi_uninstall() {
  // Drop my tables.
  if ($GLOBALS['iwDebug']) error_log("uninstalling");
  //drupal_uninstall_schema('mwi');
}  
/**
 * iwTransferMwUsersToDrupal() gets all users from MediaWiki and inserts them into Drupal.
 */
function iwTransferMwUsersToDrupal(){
  drupal_load('module', 'user');
  //connect to MW db and get info about the user
  $row = array();
  $link = mysqli_connect($GLOBALS['wgDBserver'], $GLOBALS['wgDBuser'], $GLOBALS['wgDBpassword'], $GLOBALS['wgDBname']) or die("cannot select db");
  $result = mysqli_query($link, "SELECT * FROM " . $GLOBALS['wgDBprefix'] . "user ");
  if (!$result) return false;
  if (mysqli_num_rows($result) == 0) return false;
  while ($row = mysqli_fetch_assoc($result)){
    $mw_id   = $row['user_id'];
    $mw_name = $row['user_name'];
    $mw_mail = $row['user_email'];
    $drupal_userid = db_query("SELECT uid FROM {users} WHERE name=:name", array(':name' => $mw_name) )->fetchField();
    if(!$drupal_userid) {
        // Insert user.
        $newUser = array(
            'name'   => $mw_name,
            'mail'   => $mw_mail,
            'status' => 1
        );
        $drupal_user = user_save(null, $newUser);
        $drupal_userid = $drupal_user->uid;
    }
    else {
        $user = user_load($drupal_userid);
        $edit = array(
            'mail'   => $mw_mail
        );
        user_save($user, $edit);
    }
    // Set WID, this is done in a separate step, because wid can't be set using the user class interface as far as I know.
    db_query("UPDATE {users} SET wid=:wid WHERE uid=:uid", array(':wid' => $mw_id, ':uid' => $drupal_userid) );
  }
  mysqli_free_result($result);
  //mysqli_close($link);
  return true;
}
/**
 * iwTransferMwGroupsToDrupal() gets all groups from MediaWiki and inserts them into Drupal.
 * @todo transfer of wiki groups that are not assigned to users but in deined in config files
 */
function iwTransferMwGroupsToDrupal(){
  //connect to MW db and get info about the user
  $row = array();
  $link = mysqli_connect($GLOBALS['wgDBserver'], $GLOBALS['wgDBuser'], $GLOBALS['wgDBpassword'], $GLOBALS['wgDBname']) or die("cannot select db");
  $result = mysqli_query($link, "SELECT distinct ug_group FROM " . $GLOBALS['wgDBprefix'] . "user_groups ");
  if (!$result) return false;
  if (mysqli_num_rows($result) == 0) return false;
  while ($row = mysqli_fetch_assoc($result)){
    $group_name = $row['ug_group'];
    $entry_exists = db_query("SELECT * FROM {role} WHERE name=:groupname", array(':groupname' => $group_name) )->fetchField();
    if(!$entry_exists) {
        db_query("INSERT INTO {role} (name) VALUES (:groupname)", array(':groupname' => $group_name) );
    }
  }
  mysqli_free_result($result);
  //mysqli_close($link);
  return true;
}
/**
 * iwTransferMwUsers2GroupsToDrupal() gets all user-to-group assignments from MediaWiki and inserts them into Drupal.
 */
function iwTransferMwUsers2GroupsToDrupal(){
  //connect to MW db and get info about the user
  $row = array();
  $link = mysqli_connect($GLOBALS['wgDBserver'], $GLOBALS['wgDBuser'], $GLOBALS['wgDBpassword'], $GLOBALS['wgDBname']) or die("cannot select db");
  $result = mysqli_query($link, "SELECT user_name, ug_group FROM ".$GLOBALS['wgDBprefix']."user_groups ug JOIN ".$GLOBALS['wgDBprefix']."user u on ug.ug_user = u.user_id");
  if (!$result) return false;
  if (mysqli_num_rows($result) == 0) return false;
  while ($row = mysqli_fetch_assoc($result)){
    $group_name = $row['ug_group'];
    $user_name = $row['user_name'];
    $entry_exists = db_query("SELECT * FROM {users_roles} ur JOIN {role} r on ur.rid=r.rid JOIN {users} as u on ur.uid=u.uid WHERE u.name=:username AND r.name=:groupname", array(':username' => $user_name, ':groupname' => $group_name))->fetchField();
    if(!$entry_exists) {
        db_query("INSERT INTO {users_roles} (uid, rid) SELECT uid,rid from {users} u, {role} r where u.name=:username AND r.name=:groupname ", array(':username' => $user_name, ':groupname' => $group_name));
    }
  }
  mysqli_free_result($result);
  //mysqli_close($link);
  return true;
}

