<?php
/**
 * mwi module (MediaWiki Integration)
 * 
 * Drupal Integration to MediaWiki. MediaWiki is a master for user accounts and logging in.
 *
 * @author Anton Naumenko 2009
 * @copyright Copyright (c) 2009, Anton Naumenko
 * The following code was ananlyzed and reused:
 *
 * - Make a Drupal site use Basic Auth/ldap instead of the normal login block
 *   http://drupal.org/node/111768
 *
 * - AuthDrupal - Signin integration for MediaWiki as slave of Drupal.
 *   http://www.mediawiki.org/wiki/Extension:AuthDrupal
 *
 * @license GPLv2
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 *  59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 * http://www.gnu.org/copyleft/gpl.html
 *
 */
 /**
 * The main functionality of MWI module. It does user authentication based on session and cookie setup by MediaWiki.
 */
// Get mwi config params 
require ("mwi.config");

/**
 * mwi_help() is implementation of hook_help().
 */
function mwi_help($path, $arg) {
    switch ($path) {
        case 'admin/help#mwi':
            $output = '<p>' . t('The mwi module integrates drupal into MediaWiki with single sign on. MediaWiki is a master for user accounts.') .
                '</p>';
            return $output;
    }
}

/**
 * mwi_init() is implementation of hook_init(). The core of mwi module. Here we try to authenticate user every page load.
 * @see http://drupal.org/node/111768 for the sample
 */
function mwi_init() {
    global $user;
    //if in debug mode, let us see the content of session and cookies
    if ($GLOBALS['iwDebug']) {
        if(!isset($_SESSION)) session_start();
        error_log("session id = " . session_id());
        if(array_key_exists($GLOBALS['wgCookiePrefix'] . "UserID", $_COOKIE)) error_log("cookie wid = " . $_COOKIE[$GLOBALS['wgCookiePrefix'] . "UserID"]);
        if(array_key_exists('wsUserID', $_SESSION)) $error_log("session wid = " . $_SESSION['wsUserID']);
        if(array_key_exists($GLOBALS['wgCookiePrefix'] . "UserName", $_COOKIE)) error_log("cookie wname = " . $_COOKIE[$GLOBALS['wgCookiePrefix'] . "UserName"]);
        if(array_key_exists('wsUserName', $_SESSION)) error_log("session wname = " . $_SESSION['wsUserName']);
        if(array_key_exists($GLOBALS['wgCookiePrefix'] . "Token", $_COOKIE)) error_log("cookie wtoken = " . $_COOKIE[$GLOBALS['wgCookiePrefix'] . "Token"]);
        if(array_key_exists('wsToken', $_SESSION)) error_log("session wtoken = " . $_SESSION['wsToken']);
    }

    // Get mw user id from MediaWiki session or cookie.
    $user_tid = iwGetMwUserIdFromSession();
    // If it is not there then we log in user as anonymous or redirect to login screen.
    if ($user_tid === false) {
        if ($GLOBALS['wgAllowAnonymousBrowsingOfDrupal'])
            iwLoginDrupalAnon();
        else
            iwRedirectToLogin();
        return;
    }
    // Get mw user record from MediaWiki database by user's id.
    $row = iwGetMwUserFromDB($user_tid);
    // If it is not there then we log in user as anonymous or redirect to login screen.
    if ($row === array()) {
        if ($GLOBALS['wgAllowAnonymousBrowsingOfDrupal'])
            iwLoginDrupalAnon();
        else
            iwRedirectToLogin();
        return;
    }
    // Get user token from MediaWiki session or cookie.
    $user_token = iwGetMwUserTokenFromSession($user_tid, $row);
    // If it is not there then we log in user as anonymous or redirect to login screen.
    if ($user_token === false) {
        if ($GLOBALS['wgAllowAnonymousBrowsingOfDrupal'])
            iwLoginDrupalAnon();
        else
            iwRedirectToLogin();
        return;
    }
    // If we get here then we have user's id and token in MediaWiki session or cookie and such user exists in MediaWiki database.
    // This means we have to automatically log in user into Drupal.
    require_once './includes/common.inc';
    require_once './includes/theme.inc';


    $result = db_query('SELECT u.uid,u.name FROM {users} u WHERE u.wid = :wid',array(':wid' => $user_tid))->fetchObject();
    // User doesn't exist in Drupal database.  Get user info from MediaWiki record and add user to Drupal database.
    if (!$result->uid) {
        $user_mail = $row['user_email'];
        $user_name = $row['user_name'];
        $user_number = $row['user_id'];
        // Use replace instead of insert to avoid errors in the event the uid has been added ahead of time, such as in the case of the administrators...
        db_query("REPLACE INTO {users} (uid,wid,name,mail,status,created) VALUES (:uid,:wid,:name,:mail,:status,:created)",
            array(':uid' => $user_number,
                  ':wid' => $user_tid,
                  ':name' => $user_name,
                  ':mail' => $user_mail,
                  ':status' => '1',
                  ':created' => time()
            )
        );
    }
    else {
        // User exists in Drupal database.  Set user info from there.
        $user_name = $result->name;
        $user_number = $result->uid;
    }
    // Log in, updating logs and redirecting to where the user requested, or home. Good stuff stolen from persistent login module.
    // Uncomment if you want to show the message of succesful SSO.
    // drupal_set_message(t('Authenticated via MediaWiki.  Welcome %name.', array('%name' => check_plain($user_name))));
    drupal_load('module', 'user');

    // Currently logged in user:
    global $user;
    // User we should log in:
    $mw_user = user_load($user_number);
    // Only login user if he's not logged in already.
    if($mw_user->uid != $user->uid) {
        $form_state['uid'] = $mw_user->uid;
        user_login_submit('mwi_login', $form_state);
        if ($mw_user->uid > 0) {
            return;
        }
        drupal_goto(drupal_get_destination());
    }
}
/**
 * iwGetMwUserIdFromSession() gets user's id from session or cookie.
 * The code is a rewrite from MediaWiki's User::loadFromSession()
 * @see http://svn.wikimedia.org/doc/classUser.html#01949ef9e522327c7d13292b792b2f07
 * @return mixed integer|false user id or false if none
 */
function iwGetMwUserIdFromSession() {
    if (isset($_COOKIE[$GLOBALS['wgCookiePrefix'] . "UserID"])) {
        $sId = intval($_COOKIE[$GLOBALS['wgCookiePrefix'] . "UserID"]);
        if (isset($_SESSION['wsUserID']) && $sId != $_SESSION['wsUserID']) {
            return false;
        }
        //$_SESSION['wsUserID'] = $sId;
    }
    else
        if (isset($_SESSION['wsUserID'])) {
            if ($_SESSION['wsUserID'] != 0) {
                $sId = $_SESSION['wsUserID'];
            }
            else {
                return false;
            }
        }
        else {
            return false;
        }
    return $sId;
}
/**
 * iwGetMwUserFromDB() gets user's record from MediaWiki database.
 * @param integer $user_tid user id in MedaiWiki database
 * 
 * @return array associative array of the user record. If there is no user the empty array is returned.
 */
function iwGetMwUserFromDB($user_tid) {
    //connect to MW db and get info about the user
    $row = array();
    $link = mysqli_connect($GLOBALS['wgDBserver'], $GLOBALS['wgDBuser'], $GLOBALS['wgDBpassword'], $GLOBALS['wgDBname']) or die("cannot select db");
    $result = mysqli_query($link, "SELECT * FROM " . $GLOBALS['wgDBprefix'] .
        "user where user_id=" . (int)$user_tid);
    if (!$result)
        return array();
    if (mysqli_num_rows($result) == 0)
        return array();
    $row = mysqli_fetch_assoc($result);
    mysqli_free_result($result);
    //mysqli_close($link);
    return $row;
}
/**
 * iwGetMwUserTokenFromSession() gets user's id from session or cookie.
 * The code is a rewrite from MediaWiki's User::loadFromSession()
 * @see http://svn.wikimedia.org/doc/classUser.html#01949ef9e522327c7d13292b792b2f07
 * @return mixed integer|false user token or false if none or token does not match the password
 */
function iwGetMwUserTokenFromSession($sId, $row) {
    if (isset($_SESSION['wsUserName'])) {
        $sName = $_SESSION['wsUserName'];
    }
    else
        if (isset($_COOKIE[$GLOBALS['wgCookiePrefix'] . "UserName"])) {
            $sName = $_COOKIE[$GLOBALS['wgCookiePrefix'] . "UserName"];
            //$_SESSION['wsUserName'] = $sName;
        }
        else {
            return false;
        }
    $passwordCorrect = false;

    if (isset($_SESSION['wsToken'])) {
        $passwordCorrect = $_SESSION['wsToken'] == $row['user_token'];
    }
    else
        if (isset($_COOKIE[$GLOBALS['wgCookiePrefix'] . "Token"])) {
            $passwordCorrect = $row['user_token'] == $_COOKIE[$GLOBALS['wgCookiePrefix'] .
                "Token"];
        }
        else {
            // No session or persistent login cookie
            return false;
        }
    if (($sName == $row['user_name']) && $passwordCorrect) {
        //$_SESSION['wsToken'] = $row['user_token'];
        return true;
    }
    else {
        // Invalid credentials
        return false;
    }
}
/**
 * iwRedirectToLogin() redirects the user to login path. The path is given in 
 * $GLOBALS['wgPathToLogin'] configuration parameter.
 */
function iwRedirectToLogin() {
    drupal_goto($GLOBALS['wgPathToLogin']);
}
/**
 * iwLoginDrupalAnon() signs the user in as anonymous.
 */
function iwLoginDrupalAnon() {
    if (!user_is_anonymous()) {
        global $user;
        watchdog('user', 'Session closed for %name.', array('%name' => $user->name));

        // Destroy the current session:
        session_destroy();
        module_invoke_all('user', 'logout', null, $user);

        // Load the anonymous user
        $user = drupal_anonymous_user();
    }
}
